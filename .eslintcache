[{"C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\reportWebVitals.js":"1","C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\App.js":"2","C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\index.js":"3","C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\services\\dbService.js":"4","C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\components\\Todo.js":"5","C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\components\\Testupload.js":"6","C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\services\\exportImportService.js":"7","C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\services\\dexietest.js":"8","C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\services\\fileService.js":"9","C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\webWorker\\worker.js":"10","C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\webWorker\\workerSetup.js":"11","C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\webWorker\\importExport.js":"12","C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\components\\FileAccess.js":"13"},{"size":362,"mtime":1606163924733,"results":"14","hashOfConfig":"15"},{"size":537,"mtime":1617779847684,"results":"16","hashOfConfig":"15"},{"size":500,"mtime":1606163924733,"results":"17","hashOfConfig":"15"},{"size":2974,"mtime":1611212277212,"results":"18","hashOfConfig":"15"},{"size":2409,"mtime":1611214399771,"results":"19","hashOfConfig":"15"},{"size":2425,"mtime":1614768559297,"results":"20","hashOfConfig":"15"},{"size":1532,"mtime":1613728712639,"results":"21","hashOfConfig":"15"},{"size":6020,"mtime":1614747178448,"results":"22","hashOfConfig":"15"},{"size":1249,"mtime":1614675042917,"results":"23","hashOfConfig":"15"},{"size":575,"mtime":1614768729286,"results":"24","hashOfConfig":"15"},{"size":254,"mtime":1614768285174,"results":"25","hashOfConfig":"15"},{"size":2141,"mtime":1614769377136,"results":"26","hashOfConfig":"15"},{"size":4342,"mtime":1615521420894,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dzz5xg",{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\reportWebVitals.js",[],"C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\App.js",["57","58"],"C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\index.js",[],["59","60"],"C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\services\\dbService.js",[],"C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\components\\Todo.js",[],"C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\components\\Testupload.js",["61","62"],"C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\services\\exportImportService.js",["63","64"],"C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\services\\dexietest.js",[],"C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\services\\fileService.js",["65"],"const FileService = {\r\n  // Main wrapper for Fetch API\r\n  httpRequest: (url, method, payload, headers) => {\r\n    // Configuration to accept json as a default\r\n    const config = {\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n    // method = post and payload, add it to the fetch request\r\n    if (method.toLowerCase() === \"post\" && payload && payload.length > 0) {\r\n      config.body = JSON.stringify(payload);\r\n    }\r\n    // if custom headers need to be set for the specific request\r\n    // override them here\r\n    if (\r\n      headers &&\r\n      typeof headers === \"object\" &&\r\n      Object.keys(headers).length > 0\r\n    ) {\r\n      config.headers = headers;\r\n    }\r\n    return fetch(url, config).then((response) => {\r\n      // Check if the request is 200\r\n      if (response.ok) {\r\n        let data = response;\r\n\r\n        // if the type is json return, interpret it as json\r\n        if (\r\n          response.headers.get(\"Content-Type\").indexOf(\"application/json\") > -1\r\n        ) {\r\n          data = response.json();\r\n        }\r\n        return data;\r\n      }\r\n      // if an errors, anything but 200 then reject with the actuall response\r\n      return Promise.reject(response);\r\n    });\r\n  },\r\n};\r\n","C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\webWorker\\worker.js",[],"C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\webWorker\\workerSetup.js",[],"C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\webWorker\\importExport.js",[],"C:\\Users\\andi_y\\Documents\\PROJECTS\\react-electron\\src\\components\\FileAccess.js",["66"],"import { get, set } from \"idb-keyval\"; //\"https://unpkg.com/idb-keyval@5.0.2/dist/esm/index.js\";\r\nimport React from \"react\";\r\n// require(\"dotenv\").config();\r\n\r\nconst FileAccess = () => {\r\n  const [data1, setData1] = React.useState(\"\");\r\n  const [dir, setDir] = React.useState(\"\");\r\n\r\n  const buttonFileHandler = async (e) => {\r\n    try {\r\n      const fileHandleOrUndefined = process.env.REACT_APP_FILENAME; //await get(\"file\");\r\n\r\n      if (fileHandleOrUndefined) {\r\n        // pre1.textContent = `Retrieved file handle \"${fileHandleOrUndefined.name}\" from IndexedDB.`;\r\n        setData1(\r\n          `Retrieved file handle \"${fileHandleOrUndefined}\" from IndexedDB.`\r\n        );\r\n        // return;\r\n      }\r\n      const [fileHandle] = await window.showOpenFilePicker();\r\n      await set(\"file\", fileHandle);\r\n      // pre1.textContent = `Stored file handle for \"${fileHandle.name}\" in IndexedDB.`;\r\n      let permission = await verifyPermission(fileHandle, true);\r\n      console.log(permission);\r\n    } catch (error) {\r\n      alert(error.name, error.message);\r\n    }\r\n  };\r\n\r\n  const buttonDirectoryHandler = async (e) => {\r\n    try {\r\n      //const directoryHandleOrUndefined = await get(\"directory\");\r\n      const directoryHandleOrUndefined = process.env.REACT_APP_DIRECTORYNAME;\r\n      console.log(process.env.REACT_APP_DIRECTORYNAME);\r\n      if (directoryHandleOrUndefined) {\r\n        // pre2.textContent = `Retrieved directroy handle \"${directoryHandleOrUndefined.name}\" from IndexedDB.`;\r\n        setDir(\r\n          `Retrieved directroy handle \"${directoryHandleOrUndefined}\" from IndexedDB.`\r\n        );\r\n        return;\r\n      }\r\n      const directoryHandle = await window.showDirectoryPicker();\r\n      console.log(directoryHandle);\r\n      await set(\"directory\", directoryHandle);\r\n      // pre2.textContent = `Stored directory handle for \"${directoryHandle.name}\" in IndexedDB.`;\r\n    } catch (error) {\r\n      alert(error.name, error.message);\r\n    }\r\n  };\r\n\r\n  async function verifyPermission(fileHandle, readWrite) {\r\n    const options = {};\r\n    if (readWrite) {\r\n      options.mode = \"readwrite\";\r\n    }\r\n    // Check if permission was already granted. If so, return true.\r\n    if ((await fileHandle.queryPermission(options)) === \"granted\") {\r\n      return true;\r\n    }\r\n    // Request permission. If the user grants permission, return true.\r\n    if ((await fileHandle.requestPermission(options)) === \"granted\") {\r\n      return true;\r\n    }\r\n    // The user didn't grant permission, so return false.\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <pre id=\"file\">{data1}</pre>\r\n      <pre id=\"directory\">{dir}</pre>\r\n      <button id=\"buttonfile\" onClick={buttonFileHandler}>\r\n        File\r\n      </button>\r\n      <button id=\"buttondirectory\" onClick={buttonDirectoryHandler}>\r\n        Directory\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileAccess;\r\n\r\n// const pre1 = document.querySelector(\"pre.file\");\r\n// const pre2 = document.querySelector(\"pre.directory\");\r\n// const button1 = document.querySelector(\"button.file\");\r\n// const button2 = document.querySelector(\"button.directory\");\r\n\r\n// // File handle\r\n// button1.addEventListener(\"click\", async () => {\r\n//   try {\r\n//     const fileHandleOrUndefined = await get(\"file\");\r\n//     if (fileHandleOrUndefined) {\r\n//       pre1.textContent = `Retrieved file handle \"${fileHandleOrUndefined.name}\" from IndexedDB.`;\r\n//       return;\r\n//     }\r\n//     const [fileHandle] = await window.showOpenFilePicker();\r\n//     await set(\"file\", fileHandle);\r\n//     pre1.textContent = `Stored file handle for \"${fileHandle.name}\" in IndexedDB.`;\r\n//   } catch (error) {\r\n//     alert(error.name, error.message);\r\n//   }\r\n// });\r\n\r\n// // Directory handle\r\n// button2.addEventListener(\"click\", async () => {\r\n//   try {\r\n//     const directoryHandleOrUndefined = await get(\"directory\");\r\n//     if (directoryHandleOrUndefined) {\r\n//       pre2.textContent = `Retrieved directroy handle \"${directoryHandleOrUndefined.name}\" from IndexedDB.`;\r\n//       return;\r\n//     }\r\n//     const directoryHandle = await window.showDirectoryPicker();\r\n//     await set(\"directory\", directoryHandle);\r\n//     pre2.textContent = `Stored directory handle for \"${directoryHandle.name}\" in IndexedDB.`;\r\n//   } catch (error) {\r\n//     alert(error.name, error.message);\r\n//   }\r\n// });\r\n",{"ruleId":"67","severity":1,"message":"68","line":2,"column":10,"nodeType":"69","messageId":"70","endLine":2,"endColumn":19},{"ruleId":"67","severity":1,"message":"71","line":5,"column":9,"nodeType":"69","messageId":"70","endLine":5,"endColumn":20},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"67","severity":1,"message":"76","line":1,"column":10,"nodeType":"69","messageId":"70","endLine":1,"endColumn":22},{"ruleId":"67","severity":1,"message":"77","line":6,"column":3,"nodeType":"69","messageId":"70","endLine":6,"endColumn":11},{"ruleId":"67","severity":1,"message":"78","line":1,"column":8,"nodeType":"69","messageId":"70","endLine":1,"endColumn":23},{"ruleId":"67","severity":1,"message":"79","line":2,"column":8,"nodeType":"69","messageId":"70","endLine":2,"endColumn":13},{"ruleId":"67","severity":1,"message":"80","line":1,"column":7,"nodeType":"69","messageId":"70","endLine":1,"endColumn":18},{"ruleId":"67","severity":1,"message":"81","line":1,"column":10,"nodeType":"69","messageId":"70","endLine":1,"endColumn":13},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'ipcRenderer' is assigned a value but never used.","no-native-reassign",["82"],"no-negated-in-lhs",["83"],"'readFileSync' is defined but never used.","'testBlob' is defined but never used.","'IDBExportImport' is defined but never used.","'Dexie' is defined but never used.","'FileService' is assigned a value but never used.","'get' is defined but never used.","no-global-assign","no-unsafe-negation"]